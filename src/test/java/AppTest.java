import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;

import client.GUI.MainMenu.*;
import client.GUI.RecipeScreen.*;
import client.GUI.RecordScreen.*;
import client.View;
<<<<<<< Updated upstream
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
=======
import client.model.MockLoginModel;
import client.model.RecipeDetailsMock;
import client.model.TranscribeMock;
import client.view.AccountScreen.MockAccountScreen;
import client.view.MainMenu.*;
import client.view.RecipeScreen.*;
import client.view.RecordScreen.*;
import java.util.HashMap;
import java.util.Map;
import javafx.geometry.Insets;
>>>>>>> Stashed changes
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.layout.*;
import javafx.scene.text.TextAlignment;
import javafx.scene.control.Label;
import javafx.geometry.Insets;

public class AppTest {
    TranscribeMock mockWhisper;
    RecipeDetailsMock mockGPT;
    
    @BeforeEach 
    void setUp(){
        mockGPT = new RecipeDetailsMock();
        mockWhisper = new TranscribeMock();
    }
    /*
     * newRecipe() should:  1) take in two strings
     *                      2) have the proper request body to send
     * 
     * UNIT TEST - FEATURE 1
     */
    @Test
    void testNewRecipe(){
        String mealType = "lunch";
        String ingredients = "potatoes, beans";
        try{
            mockGPT.newRecipe(mealType, ingredients);
        }catch (Exception e){}
        
        assertEquals("{\"max_tokens\":100,\"temperature\":1,\"model\":\"text-davinci-003\",\"prompt\":\"Can you create me a recipe for lunch with these ingredients potatoes, beans\"}", 
        mockGPT.requestBody.toString());

    }

    /*
     * This tests how whisper and chatgpt work together and makes sure the request is correct
     * 
     * uses TranscribeMock and RecipeDetailsMock classes
     * NOT TranscribeWhisper and RecipeDetailsChatGPT classes!!!
     * 
     * STORY TEST - FEATURE 1
     */
    @Test
    void testCreateRecipeStory()
    {
        String transcribedMealType = "";
        String transcribedIngredients = "";

        mockWhisper.meal = true;
        try{
                transcribedMealType = mockWhisper.transcribe();
        }catch (Exception e){}
        mockWhisper.meal = false;
        try{
                transcribedIngredients = mockWhisper.transcribe();
        }catch (Exception e){}
        
        
        try{
            mockGPT.newRecipe(transcribedMealType, transcribedIngredients);
        }catch (Exception e){}
        
        assertEquals("{\"max_tokens\":100,\"temperature\":1,\"model\":\"text-davinci-003\",\"prompt\":\"Can you create me a recipe for lunch with these ingredients potatoes, beans\"}", 
        mockGPT.requestBody.toString());

    }

<<<<<<< Updated upstream
=======
    // testing random word out of context
    mealType = "Tired";
    assertEquals(null, checkMealType(mealType));

    // testing no input
    mealType = "";
    assertEquals(null, checkMealType(mealType));
  }

  /*
   * UNIT TEST
   *
   * newRecipe() should:  1) take in two strings
   *                      2) have the proper request body to send
   */
  @Test
  void testNewRecipe() {
    String mealType = "lunch";
    String ingredients = "potatoes, beans";
    try {
      mockGPT.newRecipe(mealType, ingredients);
    } catch (Exception e) {}

    assertEquals(
      "{\"max_tokens\":100,\"temperature\":1,\"model\":\"text-davinci-003\",\"prompt\":\"Can you create me a recipe for lunch with these ingredients potatoes, beans\"}",
      mockGPT.requestBody.toString()
    );
  }

  /*
   * UNIT TEST
   *
   * getRecipe() should:    1) get the entire recipe details
   *                        2) should return a string
   */
  @Test
  void testGetRecipe() {
    String mealType = "lunch";
    String ingredients = "potatoes, beans";
    try {
      mockGPT.newRecipe(mealType, ingredients);
    } catch (Exception e) {}

    assertEquals("ChatGPT\nmocked recipe", mockGPT.getRecipe());
  }

  /*
   * UNIT TEST
   *
   * getRecipeName() should:    1) get just the recipe's name
   *                            2) should return a string
   */
  @Test
  void testGetRecipeName() {
    String mealType = "lunch";
    String ingredients = "potatoes, beans";
    try {
      mockGPT.newRecipe(mealType, ingredients);
    } catch (Exception e) {}

    assertEquals("ChatGPT", mockGPT.getRecipeName());
  }

  /*
   * STORY TEST - create new recipe
   *
   * 1 - record meal type with transcribe
   * 2 - check meal type is correct
   * 3 - record ingredients with transcribe
   * 4 - check chatgpt prompt
   * 5 - check recipe generated by chatgpt
   * This tests how whisper and chatgpt work together and makes sure the request is correct
   *
   * uses TranscribeMock and RecipeDetailsMock classes
   * NOT TranscribeWhisper and RecipeDetailsChatGPT classes!!!
   *
   */
  @Test
  void testCreateNewRecipeStory() {
    String transcribedMealType = "";
    String transcribedIngredients = "";

    // 1 recording meal type
    mockWhisper.recordingMealType = true;
    try {
      transcribedMealType = mockWhisper.transcribe();
    } catch (Exception e) {}

    // 2 checking meal type is valid
    assertTrue(transcribedMealType != null);
    assertEquals("lunch", checkMealType(transcribedMealType));

    // 3 recording ingredients
    mockWhisper.recordingMealType = false;
    try {
      transcribedIngredients = mockWhisper.transcribe();
    } catch (Exception e) {}

    // 4 put meal type and ingredients into chatgpt and check prompt
    try {
      mockGPT.newRecipe(transcribedMealType, transcribedIngredients);
    } catch (Exception e) {}

    // checking prompt
    assertEquals(
      "{\"max_tokens\":100,\"temperature\":1,\"model\":\"text-davinci-003\",\"prompt\":\"Can you create me a recipe for lunch with these ingredients potatoes, beans\"}",
      mockGPT.requestBody.toString()
    );

    // 5 checking getRecipe() and getRecipeName() match expected output
    assertEquals("ChatGPT\nmocked recipe", mockGPT.getRecipe());
    assertEquals("ChatGPT", mockGPT.getRecipeName());
  }

  @Test
  void testAccountCreation(){
    MockAccountScreen mockAccountScreen = new MockAccountScreen();
    mockAccountScreen.inputUsername("username");
    mockAccountScreen.inputtedPassword("password");

    MockLoginModel mockLoginModel = new MockLoginModel();
    String response = mockLoginModel.performRequest(
      "PUT", mockAccountScreen.getUsername(), mockAccountScreen.getPasswword(), null);
    
    assertEquals("put username: " + mockAccountScreen.getUsername() + 
      " and password:" + mockAccountScreen.getPasswword() + " into server", response);
  }
>>>>>>> Stashed changes
}
